import { NextResponse } from 'next/server';
import jsPDF from 'jspdf';
import nodemailer from 'nodemailer';

interface Defect {
  type: string;
  confidence: number;
  location: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
}

interface DetectionData {
  originalImage?: string; // Make originalImage optional as it might not be sent or used in PDF
  detectedImage: string;
  defects: Defect[];
  processingTime: number;
  timestamp?: string; // Optional: for report generation time
  userName?: string; // Optional: user who generated the report
}

// Basic PDF generation function (can be expanded significantly)
const generatePdf = (data: DetectionData): Buffer => {
  const doc = new jsPDF();

  // Add a title
  doc.setFontSize(22);
  doc.text('PCB Defect Detection Report', 105, 20, { align: 'center' });

  // Add generation timestamp and user (if available)
  doc.setFontSize(10);
  doc.setTextColor(100);
  const reportTime = data.timestamp || new Date().toLocaleString();
  doc.text(`Report Generated: ${reportTime}`, 105, 28, { align: 'center' });
  if (data.userName) {
    doc.text(`Generated By: ${data.userName}`, 105, 33, { align: 'center' });
  }

  // Summary Section
  doc.setFontSize(16);
  doc.setTextColor(0);
  doc.text('Detection Summary', 14, 45);
  doc.setFontSize(12);
  doc.text(`Processing Time: ${data.processingTime.toFixed(2)} seconds`, 14, 55);
  doc.text(`Total Defects Found: ${data.defects.length}`, 14, 62);

  // Defects Details Section
  if (data.defects.length > 0) {
    doc.addPage();
    doc.setFontSize(16);
    doc.text('Defect Details', 14, 20);
    let yPos = 30;
    data.defects.forEach((defect, index) => {
      if (yPos > 270) { // Check for page break
        doc.addPage();
        yPos = 20;
      }
      doc.setFontSize(12);
      doc.setFillColor(230, 230, 230); // Light gray background for defect block
      doc.rect(14, yPos - 5, 180, 28, 'F'); 
      doc.setTextColor(50,50,50);
      doc.text(`Defect ${index + 1}: ${defect.type}`, 16, yPos);
      doc.setFontSize(10);
      doc.setTextColor(100);
      doc.text(`Confidence: ${(defect.confidence * 100).toFixed(1)}%`, 18, yPos + 7);
      doc.text(`Location: X:${defect.location.x}, Y:${defect.location.y}, W:${defect.location.width}, H:${defect.location.height}`, 18, yPos + 14);
      yPos += 35;
    });
  }

  // Images Section (Placeholder - jsPDF has limitations with direct image embedding from URLs without canvas or specific plugins)
  // For a real app, you'd fetch images, convert to base64, or use html2canvas on the frontend and send image data.
  // This example will just note where images would go.
  doc.addPage();
  doc.setFontSize(16);
  doc.text('Detected Image Visual', 14, 20);
  doc.setFontSize(10);
  if (data.detectedImage) {
    doc.text('Note: The detected image would be displayed here.', 14, 30);
    doc.text(`(Image source: ${data.detectedImage})`, 14, 35);
    // Example of how you might add an image if it's base64 encoded:
    // try {
    //   // Assuming data.detectedImage is a base64 string like 'data:image/jpeg;base64,...'
    //   const imgData = data.detectedImage; 
    //   // Extract format and base64 data
    //   const imgFormat = imgData.substring(imgData.indexOf('/') + 1, imgData.indexOf(';'));
    //   const base64Data = imgData.substring(imgData.indexOf(',') + 1);
    //   doc.addImage(base64Data, imgFormat.toUpperCase(), 14, 40, 180, 100); // Adjust dimensions as needed
    // } catch (e) {
    //   console.error('Error adding image to PDF:', e);
    //   doc.text('Error displaying image.', 14, 40);
    // }
  } else {
    doc.text('Detected image data not available.', 14, 30);
  }
  
  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150);
    doc.text(`Page ${i} of ${pageCount}`, 105, 285, { align: 'center' });
    doc.text('PCB Defect Detection System - Confidential Report', 14, 285);
  }

  return Buffer.from(doc.output('arraybuffer'));
};

export async function POST(request: Request) {
  try {
    const { email, detectionData, userName } = await request.json() as { email: string; detectionData: DetectionData, userName?: string };

    if (!email || !detectionData) {
      return NextResponse.json({ message: 'Missing email or detection data' }, { status: 400 });
    }

    // Enhance detectionData with server-side info
    const enrichedDetectionData: DetectionData = {
      ...detectionData,
      timestamp: new Date().toLocaleString(),
      userName: userName || 'N/A',
    };

    const pdfBuffer = generatePdf(enrichedDetectionData);

    // Configure Nodemailer transporter
    // IMPORTANT: Configure for Alibaba Cloud Direct Mail (邮件推送)
    // Ensure these environment variables are set with your Alibaba Cloud credentials.
    const transporter = nodemailer.createTransport({
      host: process.env.ALIYUN_EMAIL_HOST || 'smtpdm.aliyun.com', // Alibaba Cloud SMTP host <mcreference link="https://blog.csdn.net/wewewecmcm/article/details/145285936">1</mcreference> <mcreference link="https://blog.csdn.net/zixuan701/article/details/106380933/">2</mcreference>
      port: Number(process.env.ALIYUN_EMAIL_PORT) || 465, // SSL port, can also be 25 or 80 (non-SSL) <mcreference link="https://blog.csdn.net/wewewecmcm/article/details/145285936">1</mcreference> <mcreference link="https://blog.csdn.net/zixuan701/article/details/106380933/">2</mcreference>
      secure: (process.env.ALIYUN_EMAIL_SECURE !== 'false'), // true for 465 (SSL), false for 25/80. Default to true if not set or set to true.
      auth: {
        user: process.env.ALIYUN_EMAIL_USER, // Your Alibaba Cloud configured sender email address <mcreference link="https://blog.csdn.net/wewewecmcm/article/details/145285936">1</mcreference>
        pass: process.env.ALIYUN_EMAIL_PASS, // The SMTP password set in Alibaba Cloud console <mcreference link="https://blog.csdn.net/wewewecmcm/article/details/145285936">1</mcreference>
      },
    });

    const mailOptions = {
      from: `"PCB Defect Detection System" <${process.env.ALIYUN_EMAIL_USER}>`, // Sender address must be one configured in Alibaba Cloud <mcreference link="https://blog.csdn.net/wewewecmcm/article/details/145285936">1</mcreference>
      to: email,
      subject: 'Your PCB Defect Detection Report',
      text: 'Please find attached your PCB Defect Detection Report.',
      html: '<p>Dear User,</p><p>Please find attached your PCB Defect Detection Report.</p><p>Thank you for using the PCB Defect Detection System.</p>',
      attachments: [
        {
          filename: `PCB_Defect_Report_${Date.now()}.pdf`,
          content: pdfBuffer,
          contentType: 'application/pdf',
        },
      ],
    };

    await transporter.sendMail(mailOptions);

    return NextResponse.json({ message: 'Report sent successfully' }, { status: 200 });

  } catch (error) {
    console.error('Error sending report:', error);
    // Check if error is an instance of Error to safely access message property
    const errorMessage = error instanceof Error ? error.message : 'Internal server error';
    return NextResponse.json({ message: 'Failed to send report', error: errorMessage }, { status: 500 });
  }
}